import React, { FC, memo, useEffect, useState } from "react";
import classes from "./formCheckout.module.scss";
import { Button } from "../../shared/button/button";
import { SimpleTextField } from "../../shared/simpleTextField/simpleTextField";
import { useInput } from "../../hooks/useInput";
import { InputRadio } from "../../shared/inputRadio/inputRadio";
import { useAppDispatch, useAppSelector } from "../../hooks/useRedux";
import { useCreateNewOrderMutation } from "../../store/API/ordersApi";
import { useNavigate } from "react-router-dom";
import { IOrderCreate } from "../../types/types";
import { BtnGroup } from "../../shared/btnGroup/btnGroup";
import { useUpdateUserMutation } from "../../store/API/userApi";
import { createPortal } from "react-dom";
import { Modal } from "../modal/modal";
import { deleteProductInCart } from "../../store/slice/productsSlice";
import { Loader } from "../../shared/loader/loader";
import { useGetDeliverySettingsQuery } from "../../store/API/settingsApi";

interface IType {}

export const FormCheckout: FC<IType> = memo(() => {
    const navigate = useNavigate();
    const dispatch = useAppDispatch();
    const { user } = useAppSelector((state) => state.userReducer);
    const { productsInCart } = useAppSelector((state) => state.productReducer);

    const address = useInput(user?.address || '');
    const phone = useInput(user?.phone || '');
    const name = useInput(user?.name || '');
    const commentInput = useInput('');

    const [typeDelivery, setTypeDelivery] = useState('–î–æ—Å—Ç–∞–≤–∫–∞');
    const [paymentMethod, setPaymentMethod] = useState('');
    const [paymentMethodError, setPaymentMethodError] = useState(false);
    const [modalError, setModalError] = useState(false);

    const [createOrder, { data: dataCreate, error, isLoading }] = useCreateNewOrderMutation();
    const [updateUser] = useUpdateUserMutation();
    const { data: deliverySettings } = useGetDeliverySettingsQuery();

    const productsTotalPrice = productsInCart.reduce(
        (acc, item) => acc + +item.price * +item.count,
        0
    );

    const deliveryPrice = typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && deliverySettings
        ? (productsTotalPrice >= deliverySettings.freeDeliveryFrom ? 0 : deliverySettings.deliveryPrice)
        : 0;

    const totalWithDelivery = productsTotalPrice + deliveryPrice;

    useEffect(() => {
        if (error && !isLoading) setModalError(true);
    }, [error, isLoading]);

    useEffect(() => {
        if (!error && !isLoading && dataCreate) {
            localStorage.setItem('productsInCart', '');
            navigate(`/order/${dataCreate.id}`);
            dispatch(deleteProductInCart());
        }
    }, [dataCreate]);

    const submitHandler = () => {
        const data: IOrderCreate = {
            userId: user?.id,
            address: typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' ? address.value : '–°–∞–º–æ–≤—ã–≤–æ–∑',
            typeDelivery,
            phone: phone.value,
            name: name.value,
            paymentMethod: typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' ? paymentMethod : '–ù–∞–ª–∏—á–Ω—ã–µ',
            deliveryPrice,
            orderProducts: productsInCart.map(item => ({ id: +item.id, count: +item.count })),
            status: '–Ω–æ–≤—ã–π',
            comment: commentInput.value
        };

        if (!paymentMethod) setPaymentMethodError(true);
        if (!address.value) address.setError(true);
        if (!phone.value || phone.value.includes('_')) phone.setError(true);

        if (data.address && data.phone && !data.phone.includes('_') && data.paymentMethod) {
            createOrder(data);
            updateUser({
                userId: user?.id,
                body: {
                    address: address.value,
                    phone: phone.value,
                    name: name.value,
                }
            });
        }
    };

    return (
        <form className={classes.formCheckout} onSubmit={(e) => e.preventDefault()}>
            {isLoading && <Loader circle />}

            <div className={classes.inner}>
                <BtnGroup
                    activeOneBtn={typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞'}
                    activeTwoBtn={typeDelivery === '–°–∞–º–æ–≤—ã–≤–æ–∑'}
                    onClickOneBtn={() => setTypeDelivery('–î–æ—Å—Ç–∞–≤–∫–∞')}
                    onClickTwoBtn={() => setTypeDelivery('–°–∞–º–æ–≤—ã–≤–æ–∑')}
                    textOneBtn={'–î–æ—Å—Ç–∞–≤–∫–∞'}
                    textTwoBtn={'–°–∞–º–æ–≤—ã–≤–æ–∑'}
                />
            </div>

            <div className={classes.box}>
                {typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && (
                    <SimpleTextField
                        label={"–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"}
                        value={address.value}
                        onChange={address.onChange}
                        error={address.error}
                    />
                )}
                <SimpleTextField label={"–¢–µ–ª–µ—Ñ–æ–Ω"} type='phone' value={phone.value} onChange={phone.onChange} error={phone.error} />
                <SimpleTextField label={"–ò–º—è"} value={name.value} onChange={name.onChange} />
                <SimpleTextField label={'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'} onChange={commentInput.onChange} value={commentInput.value} description />
            </div>

            {typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && (
                <div className={'mb-4'}>
                    <div className={classes.paymentTitle}>
                        <div>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</div>
                        {paymentMethodError && <div className={'error'}>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</div>}
                    </div>
                    <InputRadio label={'–ù–∞–ª–∏—á–Ω—ã–µ'} value={'–ù–∞–ª–∏—á–Ω—ã–µ'} onChange={setPaymentMethod} name={"payment"} />
                    <InputRadio label={'–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'} value={'–ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'} onChange={setPaymentMethod} name={"payment"} />
                </div>
            )}

            {typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && deliverySettings && (
                <div className={classes.deliveryNote}>
                    {productsTotalPrice >= deliverySettings.freeDeliveryFrom ? (
                        <span>–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É</b> üéâ</span>
                    ) : (
                        <span>
                            –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{deliverySettings.deliveryPrice} ‚ÇΩ</b><br />
                            –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç <b>{deliverySettings.freeDeliveryFrom} ‚ÇΩ</b>
                        </span>
                    )}
                </div>
            )}

            <div className={classes.totalBlock}>
                <div>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: {productsTotalPrice} ‚ÇΩ</div>
                {typeDelivery === '–î–æ—Å—Ç–∞–≤–∫–∞' && (
                    <div>–î–æ—Å—Ç–∞–≤–∫–∞: {deliveryPrice} ‚ÇΩ</div>
                )}
                <div><b>–ò—Ç–æ–≥–æ: {totalWithDelivery} ‚ÇΩ</b></div>
            </div>

            <Button onClick={submitHandler}>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</Button>

            {modalError && createPortal(
                <Modal
                    textModal={'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'}
                    onClick={() => setModalError(false)}
                    textBtn={'–ó–∞–∫—Ä—ã—Ç—å'}
                    error
                />,
                document.body
            )}
        </form>
    );
});
