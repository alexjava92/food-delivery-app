import {MainLayout} from "../../layout/mainLayout";
import React, {memo, useState} from "react";
import {useGetStatisticsQuery} from "../../store/API/ordersApi";
import {Button} from "../../shared/button/button";
import {Calendar} from "../../shared/calendar/calendar";
import classes from "./statisticsPage.module.scss";
import {ButtonGroup} from "../../shared/button/buttonGroup/buttonGroup";
import {CalendarCheck, CalendarClock, CalendarDays, CalendarRange, Timer, History} from "lucide-react";

const StatisticsPage = memo(() => {
    const date = new Date();
    const today = new Date();
    today.setHours(10, 0, 0, 0);

    const startOfCurrentMonth = new Date(date.getFullYear(), date.getMonth(), 1);
    const endOfPreviousMonth = new Date(startOfCurrentMonth.getTime() - 1);

    const [catId, setCatId] = useState('');
    const [endTime, setEndTime] = useState(date);
    const [startTime, setStartTime] = useState(date);
    const [startDate, setStartDate] = useState('');
    const [endDate, setEndDate] = useState('');
    const [btnId, setBtnId] = useState(0);
    const {data} = useGetStatisticsQuery({startTime, endTime, catId});

    const handler = (start: any, end: any, btnId: number) => {
        setStartTime(start);
        setEndTime(end);
        setBtnId(btnId);
    };

    const isStatsEmpty =
        (data?.gain ?? 0) === 0 &&
        (data?.countOfOrders ?? 0) === 0 &&
        (data?.averageCheck ?? 0) === 0 &&
        (data?.delivery?.count ?? 0) === 0 &&
        (data?.delivery?.total ?? 0) === 0 &&
        (data?.pickupCount ?? 0) === 0 &&
        (data?.stat?.length ?? 0) === 0;

    return (
        <MainLayout heading={'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'} textCenter>


            <ButtonGroup
                items={[
                    {
                        label: "–°–µ–≥–æ–¥–Ω—è",
                        active: btnId === 1,
                        onClick: () => handler(today, date, 1),
                    },
                    {
                        label: "–í—á–µ—Ä–∞",
                        active: btnId === 2,
                        onClick: () =>
                            handler(
                                new Date(new Date(date.setDate(date.getDate() - 1)).setHours(0, 0, 0, 0)),
                                new Date(new Date(date.setDate(date.getDate())).setHours(23, 59, 59, 999)),
                                2
                            ),
                    },
                    {
                        label: "–ó–∞ 7 –¥–Ω–µ–π",
                        active: btnId === 3,
                        onClick: () =>
                            handler(
                                new Date(date.getFullYear(), date.getMonth(), date.getDate() - 7),
                                date,
                                3
                            ),
                    },
                    {
                        label: "–≠—Ç–æ—Ç –º–µ—Å—è—Ü",
                        active: btnId === 4,
                        onClick: () =>
                            handler(
                                new Date(date.getFullYear(), date.getMonth(), 1),
                                new Date(date.getFullYear(), date.getMonth() + 1, 0),
                                4
                            ),
                    },
                    {
                        label: "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü",
                        active: btnId === 5,
                        onClick: () =>
                            handler(
                                new Date(endOfPreviousMonth.getFullYear(), endOfPreviousMonth.getMonth(), 1),
                                new Date(startOfCurrentMonth.getTime() - 1),
                                5
                            ),
                    },
                    {
                        label: "–ó–∞ –≥–æ–¥",
                        active: btnId === 6,
                        onClick: () =>
                            handler(
                                new Date(today.getFullYear(), 0, 1),
                                new Date(today.getFullYear(), 11, 31),
                                6
                            ),
                    },
                ]}
            />


            <div className={classes.box}>
                <div className={classes.calendarBox}>
                    <Calendar changeDate={setStartDate} formatISO/>
                    -
                    <Calendar changeDate={setEndDate} formatISO/>
                </div>
                <Button
                    className={classes.compact}
                    size="small"
                    active={btnId === 7}
                    onClick={() => handler(
                        new Date(new Date(startDate).setHours(0, 0, 0, 0)),
                        new Date(new Date(endDate).setHours(23, 59, 59, 999)),
                        7
                    )}
                >
                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </Button>
            </div>
            <div className="mb-4">
                {catId && <Button className={classes.compact} size="small" color="danger"
                                  onClick={() => setCatId('')}>–ù–∞–∑–∞–¥</Button>}
            </div>

            <div className={classes.mainStatsRow}>
                {(data?.gain > 0 || data?.countOfOrders > 0 || data?.averageCheck > 0) && (
                    <div className={classes.mainStatsCol}>
                        <div className={classes.mainStatsTitle}>–í—ã—Ä—É—á–∫–∞ –∏ –∑–∞–∫–∞–∑—ã</div>

                        <div className={classes.statGroup}>
                            {data?.gain > 0 && (
                                <div className={classes.statRow}>
                                    <span className={classes.statLabel}>–í—ã—Ä—É—á–∫–∞:</span>
                                    <span className={classes.statValue}>{data.gain} ‚ÇΩ</span>
                                </div>
                            )}
                            {data?.countOfOrders > 0 && (
                                <div className={classes.statRow}>
                                    <span className={classes.statLabel}>–ó–∞–∫–∞–∑—ã:</span>
                                    <span className={classes.statValue}>{data.countOfOrders} —à—Ç</span>
                                </div>
                            )}
                            {data?.averageCheck > 0 && (
                                <div className={classes.statRow}>
                                    <span className={classes.statLabel}>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: </span>
                                    <span className={classes.statValue}>{data.averageCheck} ‚ÇΩ</span>
                                </div>
                            )}
                        </div>
                    </div>
                )}
                {(data?.delivery?.count > 0 || data?.delivery?.total > 0 || data?.pickupCount > 0) && (
                    <div className={classes.mainStatsCol}>
                        <div className={classes.mainStatsTitle}>–î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑</div>

                        <div className={classes.statGroup}>
                            {data?.delivery?.count > 0 && (
                                <div className={classes.statRow}>
                                    <span className={classes.statLabel}>–î–æ—Å—Ç–∞–≤–∫–∏:</span>
                                    <span className={classes.statValue}>{data.delivery.count} —à—Ç</span>
                                </div>
                            )}
                            {data?.delivery?.total > 0 && (
                                <div className={classes.statRow}>
                                    <span className={classes.statLabel}>–°—É–º–º–∞ –¥–æ—Å—Ç–∞–≤–æ–∫:</span>
                                    <span className={classes.statValue}>{data.delivery.total} ‚ÇΩ</span>
                                </div>
                            )}
                            {data?.pickupCount > 0 && (
                                <div className={classes.statRow}>
                                    <span className={classes.statLabel}>–°–∞–º–æ–≤—ã–≤–æ–∑:</span>
                                    <span className={classes.statValue}>{data.pickupCount} —à—Ç</span>
                                </div>
                            )}
                        </div>
                    </div>
                )}

            </div>

            {isStatsEmpty && (
                <div className={classes.emptyBlock}>
                    <div className={classes.emoji}>üì¶</div>
                    <div className={classes.emptyText}>–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ üòÅ</div>
                </div>
            )}


            <div className={classes.statsGrid}>
                {data?.stat.map((item: any) => (
                    <div
                        key={item?.title}
                        className={`${classes.card} ${item?.id ? classes.clickable : ''}`}
                        onClick={() => item?.id && setCatId(item?.id)}
                    >
                        <span className={classes.title}>{item?.title}</span>
                        <span className={classes.value}>{item?.count} —à—Ç</span>
                    </div>
                ))}
            </div>

        </MainLayout>
    );
});

export default StatisticsPage;
