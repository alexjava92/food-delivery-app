import {
  HttpException,
  HttpStatus,
  Inject,
  Injectable,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { ProductsModel } from './products.model';
import { ProductsDto } from './products.dto';
import { FileService } from '../file/file.service';
import { BotService } from '../bot/bot.service';
import { Cache } from 'cache-manager';
import { CACHE_MANAGER } from '@nestjs/cache-manager';

@Injectable()
export class ProductsService {
  constructor(
      @InjectModel(ProductsModel)
      private ProductsRepository: typeof ProductsModel,
      private fileService: FileService,
      private readonly botService: BotService,
      @Inject(CACHE_MANAGER) private cacheManager: Cache,
  ) {}

  async createProduct(dto: ProductsDto, file: string) {
    try {
      const fileName = await this.fileService.createFile(file);
      const product = await this.ProductsRepository.create({ ...dto, image: fileName });

      // –û—á–∏—Å—Ç–∏—Ç—å –æ–±—â–∏–π –∫—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      await this.cacheManager.del('products:all');
      return product;
    } catch (e) {
      await this.botService.errorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`);
      throw new HttpException(
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`,
          HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async getAllProducts() {
    const cacheKey = 'products:all';
    try {
      console.time(`‚è±Ô∏è Redis get [${cacheKey}]`);
      const cached = await this.cacheManager.get<ProductsModel[]>(cacheKey);
      console.timeEnd(`‚è±Ô∏è Redis get [${cacheKey}]`);

      if (cached) {
        console.log(`üì¶ [${cacheKey}] ‚Üí FROM CACHE`);
        return cached;
      }

      console.log(`üíæ [${cacheKey}] ‚Üí FROM DB`);
      const products = await this.ProductsRepository.findAll();
      const plain = products.map(p => p.get({ plain: true }));

      await this.cacheManager.set(cacheKey, plain, 60 * 60);
      console.log(`‚úÖ [${cacheKey}] ‚Üí WRITTEN TO CACHE`);

      return products;
    } catch (e) {
      await this.botService.errorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`);
      throw new HttpException(
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`,
          HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async getOneProduct(id: number) {
    const cacheKey = `product:${id}`;
    try {
      console.time(`‚è±Ô∏è Redis get [${cacheKey}]`);
      const cached = await this.cacheManager.get<ProductsModel>(cacheKey);
      console.timeEnd(`‚è±Ô∏è Redis get [${cacheKey}]`);

      if (cached) {
        console.log(`üì¶ [${cacheKey}] ‚Üí FROM CACHE`);
        return cached;
      }

      console.log(`üíæ [${cacheKey}] ‚Üí FROM DB`);
      const product = await this.ProductsRepository.findByPk(id);

      if (product) {
        const plain = product.get({ plain: true });
        await this.cacheManager.set(cacheKey, plain, 60 * 60);
        console.log(`‚úÖ [${cacheKey}] ‚Üí WRITTEN TO CACHE`);
      }

      return product;
    } catch (e) {
      await this.botService.errorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`);
      throw new HttpException(
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`,
          HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async updateProduct(id: number, dto: ProductsDto, image) {
    try {
      const product = await this.ProductsRepository.findOne({ where: { id } });
      const fileName = image ? await this.fileService.createFile(image) : product.dataValues.image;

      await product.update({ ...dto, image: fileName });

      // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ ID –∏ –æ–±—â–∏–π
      await this.cacheManager.del('products:all');
      await this.cacheManager.del(`product:${id}`);
      await this.cacheManager.del(`category:${product.categoryId}`);

      return product;
    } catch (e) {
      await this.botService.errorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`);
      throw new HttpException(
          `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`,
          HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  async deleteProduct(id: number): Promise<void> {
    try {
      const product = await this.ProductsRepository.findByPk(id);
      if (!product) throw new Error('Product not found');

      await product.destroy();

      await this.cacheManager.del('products:all');
      await this.cacheManager.del(`product:${id}`);
      await this.cacheManager.del('categories:all');

      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω –ø—Ä–æ–¥—É–∫—Ç ${id}, –∫—ç—à –æ—á–∏—â–µ–Ω`);
    } catch (e) {
      await this.botService.errorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ${e}`);
      throw new HttpException(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞',
          HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
