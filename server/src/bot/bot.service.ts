import { Injectable } from '@nestjs/common';
import { tgBot } from "./bot";

@Injectable()
export class BotService {
    async errorMessage(text: string) {
        for (const chatId of process.env.BOT_CHAT_ID_MESSAGE_ERROR.split(",")) {
            await tgBot.sendMessage(chatId, text);
        }
    }

    private formatOrderNotification(order: any): string {
        const isPickup = order.typeDelivery === '–°–∞–º–æ–≤—ã–≤–æ–∑';
        const emoji = isPickup ? 'üè†' : 'üöö';
        const productsList = order.orderProducts.map(p =>
            `‚Ä¢ ${p.title} [${p.OrderProductsModel.count} —à—Ç.]`
        ).join('\n');

        let message = `–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ${emoji} ‚Ññ${order.id}\n\n`;
        if (!isPickup) message += `–ê–¥—Ä–µ—Å: ${order.address}\n`;
        message += `–ò–º—è: ${order.name}\n`;
        message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n`;
        message += `–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.typeDelivery}\n`;
        if (!isPickup) message += `–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${order.paymentMethod}\n`;
        message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment?.trim() || '-'}\n\n`;
        message += `–í –∑–∞–∫–∞–∑–µ:\n${productsList}`;

        return message;
    }


    async notification(adminIds: string[], order: any) {

        if (!Array.isArray(adminIds) || adminIds.length === 0) return;

        const inlineStatusButtons = [
            [
                { text: "–ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data: `setStatus_–≥–æ—Ç–æ–≤–∏—Ç—Å—è_${order.id}` },
                { text: "–ì–æ—Ç–æ–≤–æ", callback_data: `setStatus_–≥–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ_${order.id}` },
            ],
            [
                { text: "–í—ã–¥–∞–Ω", callback_data: `setStatus_–≤—ã–¥–∞–Ω_${order.id}` },
                { text: "–û—Ç–º–µ–Ω–µ–Ω", callback_data: `setStatus_–æ—Ç–º–µ–Ω–µ–Ω_${order.id}` },
            ]
        ];

        const message = this.formatOrderNotification(order);
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", web_app: { url: `${process.env.WEB_APP_URL}order/${order.id}` } }],
                    ...inlineStatusButtons,
                ],
            },
        };

        for (const chatId of adminIds) {
            try {
                await tgBot.sendMessage(chatId, message, keyboard);
            } catch (e) {
                console.error(`[BotService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è chatId=${chatId}:`, e.message);
            }
        }
    }

    async userNotification(chatId: string | number, message: string) {
        try {
            await tgBot.sendMessage(chatId, message);
        } catch (e) {
            console.error(`[BotService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é chatId=${chatId}:`, e.message);
        }
    }

    async updateUser(chatId: string) {
        for (const admin of process.env.BOT_CHAT_ID_MESSAGE.split(",")) {
            try {
                await tgBot.sendMessage(admin, `–ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', web_app: { url: `${process.env.WEB_APP_URL}update-user/${chatId}` } }]
                        ]
                    }
                });
            } catch (e) {
                console.error(`[BotService] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ chatId=${admin}:`, e.message);
            }
        }
    }
}