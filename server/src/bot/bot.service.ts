import { Injectable } from '@nestjs/common';
import { tgBot } from "./bot";
import TelegramBot from "node-telegram-bot-api";
import {format, formatDistanceToNow} from "date-fns";

@Injectable()
export class BotService {
    async errorMessage(text: string) {
        for (const chatId of process.env.BOT_CHAT_ID_MESSAGE_ERROR.split(",")) {
            await tgBot.sendMessage(chatId, text);
        }
    }

    public generateStatusButtons(order: any) {
        const status = order.status;
        const isPickup = order.typeDelivery === '–°–∞–º–æ–≤—ã–≤–æ–∑';

        const nextStatusButtons = [];

        if (status === '–Ω–æ–≤—ã–π' || status === '–æ—Ç–º–µ–Ω–µ–Ω') {
            nextStatusButtons.push({ text: "üîµ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data: `setStatus_–≥–æ—Ç–æ–≤–∏—Ç—Å—è_${order.id}` });
        }

        if (status === '–≥–æ—Ç–æ–≤–∏—Ç—Å—è') {
            if (isPickup) {
                nextStatusButtons.push({ text: "üü† –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ", callback_data: `setStatus_–≥–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ_${order.id}` });
            } else {
                nextStatusButtons.push({ text: "üü¢ –í—ã–¥–∞–Ω", callback_data: `setStatus_–≤—ã–¥–∞–Ω–æ_${order.id}` });
            }
        }

        if (status === '–≥–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ') {
            nextStatusButtons.push({ text: "üü¢ –í—ã–¥–∞–Ω", callback_data: `setStatus_–≤—ã–¥–∞–Ω–æ_${order.id}` });
        }

        nextStatusButtons.push({
            text: "–û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data: `confirmCancel_${order.id}`,
        })

        return nextStatusButtons;
    }

    public formatOrderNotification(order: any): string {
        const isPickup = order.typeDelivery === '–°–∞–º–æ–≤—ã–≤–æ–∑';
        const emoji = isPickup ? 'üìçüö∂‚Äç‚ôÇÔ∏è' : 'üöö';

        const statusEmojiMap = {
            "–æ—Ç–º–µ–Ω–µ–Ω": "üî¥",
            "–≥–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ": "üü†",
            "–≤—ã–¥–∞–Ω–æ": "üü¢",
            "–≥–æ—Ç–æ–≤–∏—Ç—Å—è": "üîµ",
            "–Ω–æ–≤—ã–π": "üü°"
        };

        const statusLine = `<b>–°–¢–ê–¢–£–°: ${statusEmojiMap[order.status] || ''} ${order.status.toUpperCase()}</b>`;


        const productsList = order.orderProducts.map(p => {
            const count = p.OrderProductsModel?.count || p.order_product?.count || 1;
            return `‚Ä¢ ${p.title} [${count} —à—Ç.]`;
        }).join('\n');

        const total = order.orderProducts.reduce((sum, p) => {
            const count = p.OrderProductsModel?.count || p.order_product?.count || 1;
            const price = Number(p.price) || 0;
            return sum + count * price;
        }, 0);

        const delivery = !isPickup ? Number(order.deliveryPrice || 0) : 0;
        const grandTotal = total + delivery;

        const formatTime = (date: string) =>
            new Date(date).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

        const createdAt = formatTime(order.createdAt);
        const updatedAt = formatTime(order.updatedAt);

        let message = `${statusLine}\n\n–ó–∞–∫–∞–∑ #n${order.id}  ${emoji}\n\n`;

        if (!isPickup) message += `–ê–¥—Ä–µ—Å: ${order.address}\n`;
        message += `–ò–º—è: ${order.name}\n`;
        message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n`;
        message += `–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.typeDelivery}\n`;
        if (!isPickup) message += `–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${order.paymentMethod}\n`;
        message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment?.trim() || '-'}\n\n`;

        message += `–í –∑–∞–∫–∞–∑–µ:\n${productsList}`;

        if (!isPickup) {
            message += `\n\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${total}‚ÇΩ\n–î–æ—Å—Ç–∞–≤–∫–∞: ${delivery}‚ÇΩ\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${grandTotal}‚ÇΩ`;
        } else {
            message += `\n\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${grandTotal}‚ÇΩ`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
        message += `\n\n‚è± –ü—Ä–∏–Ω—è—Ç: ${createdAt}`;
        message += `\nüìã –°—Ç–∞—Ç—É—Å: ${statusEmojiMap[order.status] || ''} ${order.status} (${updatedAt})`;

        return message;
    }




    async notification(adminIds: string[], order: any) {
        if (!Array.isArray(adminIds) || adminIds.length === 0) return [];


        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", web_app: { url: `${process.env.WEB_APP_URL}order/${order.id}` } }],
                    this.generateStatusButtons(order)
                ],
            },
        };

        const message = this.formatOrderNotification(order);
        const responses = [];

        for (const chatId of adminIds) {
            try {
                const sent = await tgBot.sendMessage(chatId, message, keyboard);
                responses.push({
                    chatId,
                    messageId: sent.message_id,
                    parse_mode: "HTML",
                });
            } catch (e) {
                console.error(`[BotService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è chatId=${chatId}:`, e.message);
            }
        }

        return responses;
    }

    async userNotification(chatId: string | number, message: string) {
        try {
            await tgBot.sendMessage(chatId, message);
        } catch (e) {
            console.error(`[BotService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é chatId=${chatId}:`, e.message);
        }
    }

    async updateUser(chatId: string) {
        for (const admin of process.env.BOT_CHAT_ID_MESSAGE.split(",")) {
            try {
                await tgBot.sendMessage(admin, `–ò–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', web_app: { url: `${process.env.WEB_APP_URL}update-user/${chatId}` } }]
                        ]
                    }
                });
            } catch (e) {
                console.error(`[BotService] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ chatId=${admin}:`, e.message);
            }
        }
    }




}